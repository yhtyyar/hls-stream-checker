#!/usr/bin/env python3
"""
API —Å–µ—Ä–≤–µ—Ä –¥–ª—è HLS Stream Checker
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–æ–π HLS –ø–æ—Ç–æ–∫–æ–≤
"""

import json
import os
import subprocess
import threading
import time
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional

from flask import Flask, jsonify, request, send_from_directory
from flask_cors import CORS

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
import config

app = Flask(__name__, static_folder='web', template_folder='web')
CORS(app)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
current_process: Optional[subprocess.Popen] = None
log_buffer = []
is_checking = False
check_thread: Optional[threading.Thread] = None
start_time = None

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
PROJECT_ROOT = Path(__file__).parent.absolute()
WEB_DIR = PROJECT_ROOT / "web"
DATA_DIR = PROJECT_ROOT / "data"
CSV_DIR = DATA_DIR / "csv"
JSON_DIR = DATA_DIR / "json"
LOGS_DIR = PROJECT_ROOT / "logs"


@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    return send_from_directory(WEB_DIR, 'index.html')


@app.route('/<path:filename>')
def static_files(filename):
    """–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤"""
    return send_from_directory(WEB_DIR, filename)


@app.route('/api/health')
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API"""
    return jsonify({
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "isChecking": is_checking,
        "uptime": (datetime.now() - start_time).total_seconds() if start_time else 0
    })


@app.route('/api/check', methods=['POST'])
def start_check():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ HLS –ø–æ—Ç–æ–∫–æ–≤"""
    global current_process, is_checking, check_thread, log_buffer, start_time
    
    if is_checking:
        return jsonify({"error": "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞"}), 400
    
    data = request.get_json()
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    channel_count = data.get('channelCount', 'all')
    duration = data.get('duration', 5)
    refresh_playlist = data.get('refreshPlaylist', False)
    export_data = data.get('exportData', True)
    monitor_interval = data.get('monitorInterval', 60)
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    cmd = ["python", "hls_checker_single.py", 
           "--count", str(channel_count),
           "--minutes", str(duration),
           "--monitor-interval", str(monitor_interval)]
    
    if refresh_playlist:
        cmd.append("--refresh")
    
    if not export_data:
        cmd.append("--no-export")
    
    # –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    def run_check():
        global is_checking, log_buffer, current_process
        is_checking = True
        log_buffer = []
        
        try:
            # –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞
            current_process = subprocess.Popen(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                universal_newlines=True,
                bufsize=1
            )
            
            # –ß—Ç–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
            while True:
                output = current_process.stdout.readline()
                if output == '' and current_process.poll() is not None:
                    break
                if output:
                    log_buffer.append(output.strip())
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞ –ª–æ–≥–æ–≤
                    if len(log_buffer) > 1000:
                        log_buffer = log_buffer[-500:]  # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 500 –∑–∞–ø–∏—Å–µ–π
            
            current_process.wait()
        except Exception as e:
            log_buffer.append(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}")
        finally:
            is_checking = False
            current_process = None
    
    # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–∫–µ
    check_thread = threading.Thread(target=run_check)
    check_thread.daemon = True
    check_thread.start()
    
    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
    start_time = datetime.now()
    
    return jsonify({"status": "started", "message": "–ü—Ä–æ–≤–µ—Ä–∫–∞ HLS –ø–æ—Ç–æ–∫–æ–≤ –Ω–∞—á–∞—Ç–∞"})


@app.route('/api/check/stop', methods=['POST'])
def stop_check():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ HLS –ø–æ—Ç–æ–∫–æ–≤"""
    global current_process, is_checking, check_thread, start_time
    
    if not is_checking:
        return jsonify({"error": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞"}), 400
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
    if current_process and current_process.poll() is None:
        current_process.terminate()
        try:
            current_process.wait(timeout=5)
        except subprocess.TimeoutExpired:
            current_process.kill()
    
    is_checking = False
    current_process = None
    check_thread = None
    start_time = None
    
    return jsonify({"status": "stopped", "message": "–ü—Ä–æ–≤–µ—Ä–∫–∞ HLS –ø–æ—Ç–æ–∫–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"})


@app.route('/api/check/status')
def check_status():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    global current_process, start_time
    
    process_running = False
    if current_process:
        process_running = current_process.poll() is None
    
    uptime = 0
    if start_time and is_checking:
        uptime = (datetime.now() - start_time).total_seconds()
    
    return jsonify({
        "isChecking": is_checking,
        "isProcessRunning": process_running,
        "logLines": len(log_buffer),
        "uptime": uptime
    })


@app.route('/api/logs')
def get_logs():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    limit = request.args.get('limit', 100, type=int)
    offset = request.args.get('offset', 0, type=int)
    
    # –í–æ–∑–≤—Ä–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ª–æ–≥–æ–≤
    start_idx = max(0, len(log_buffer) - limit - offset)
    end_idx = len(log_buffer) - offset
    logs = log_buffer[start_idx:end_idx]
    
    return jsonify({
        "logs": logs,
        "total": len(log_buffer),
        "limit": limit,
        "offset": offset
    })


@app.route('/api/data/latest')
def get_latest_data():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    try:
        # –ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ JSON –æ—Ç—á–µ—Ç–∞
        json_files = list(JSON_DIR.glob("hls_api_report_*.json"))
        if not json_files:
            return jsonify({"error": "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"}), 404
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
        json_files.sort(key=lambda x: x.stat().st_mtime, reverse=True)
        latest_file = json_files[0]
        
        # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        with open(latest_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        return jsonify(data)
    except Exception as e:
        return jsonify({"error": f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"}), 500


@app.route('/api/data/files')
def get_data_files():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    try:
        files = {
            "csv": [],
            "json": []
        }
        
        # CSV —Ñ–∞–π–ª—ã
        if CSV_DIR.exists():
            csv_files = list(CSV_DIR.glob("*.csv"))
            csv_files.sort(key=lambda x: x.stat().st_mtime, reverse=True)
            for file in csv_files:
                files["csv"].append({
                    "name": file.name,
                    "path": f"/data/csv/{file.name}",
                    "size": file.stat().st_size,
                    "modified": datetime.fromtimestamp(file.stat().st_mtime).isoformat()
                })
        
        # JSON —Ñ–∞–π–ª—ã
        if JSON_DIR.exists():
            json_files = list(JSON_DIR.glob("*.json"))
            json_files.sort(key=lambda x: x.stat().st_mtime, reverse=True)
            for file in json_files:
                files["json"].append({
                    "name": file.name,
                    "path": f"/data/json/{file.name}",
                    "size": file.stat().st_size,
                    "modified": datetime.fromtimestamp(file.stat().st_mtime).isoformat()
                })
        
        return jsonify(files)
    except Exception as e:
        return jsonify({"error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {str(e)}"}), 500


@app.route('/data/<path:filename>')
def serve_data_file(filename):
    """–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
    if filename.endswith('.csv'):
        return send_from_directory(CSV_DIR, filename)
    elif filename.endswith('.json'):
        return send_from_directory(JSON_DIR, filename)
    else:
        return jsonify({"error": "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞"}), 400


@app.route('/api/config')
def get_config():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    return jsonify({
        "defaultChannelCount": config.DEFAULT_CHANNEL_COUNT,
        "defaultDurationMinutes": config.DEFAULT_DURATION_MINUTES,
        "defaultRefreshPlaylist": config.DEFAULT_REFRESH_PLAYLIST,
        "defaultExportData": config.DEFAULT_EXPORT_DATA,
        "requestTimeout": config.REQUEST_TIMEOUT,
        "maxRetries": config.MAX_RETRIES,
        "serviceCheckInterval": config.SERVICE_CHECK_INTERVAL
    })


def main():
    """–ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞"""
    global start_time
    start_time = datetime.now()
    
    print("üöÄ –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞ HLS Stream Checker...")
    print("üåê –î–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:5000")
    print("üìÅ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã: web/")
    print("üìä –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∞: data/")
    print("üìã –õ–æ–≥–∏: logs/")
    print("‚å®Ô∏è  –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    WEB_DIR.mkdir(exist_ok=True)
    DATA_DIR.mkdir(exist_ok=True)
    CSV_DIR.mkdir(exist_ok=True)
    JSON_DIR.mkdir(exist_ok=True)
    LOGS_DIR.mkdir(exist_ok=True)
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    app.run(host='0.0.0.0', port=5000, debug=True, use_reloader=False)


if __name__ == '__main__':
    main()